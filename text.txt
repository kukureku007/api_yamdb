============================= test session starts ==============================
platform darwin -- Python 3.9.8, pytest-6.2.4, py-1.11.0, pluggy-0.13.1 -- /Users/michaelrudy/Dev/api_yamdb/venv/bin/python3.9
django: settings: api_yamdb.settings (from ini)
rootdir: /Users/michaelrudy/Dev/api_yamdb, configfile: pytest.ini, testpaths: tests/
plugins: pythonpath-0.7.3, django-4.4.0
collecting ... collected 53 items

tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup FAILED [  1%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup FAILED [  3%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup FAILED [  5%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_admin_create_user PASSED [  7%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data FAILED [  9%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted FAILED [ 11%]
tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted FAILED [ 13%]
tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated FAILED [ 15%]
tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated FAILED [ 16%]
tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated FAILED [ 18%]
tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin FAILED    [ 20%]
tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search FAILED [ 22%]
tests/test_01_users.py::Test01UserAPI::test_04_01_users_get_admin_only PASSED [ 24%]
tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin FAILED [ 26%]
tests/test_01_users.py::Test01UserAPI::test_05_02_users_post_user_superuser PASSED [ 28%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_admin PASSED [ 30%]
tests/test_01_users.py::Test01UserAPI::test_06_users_username_get_not_admin PASSED [ 32%]
tests/test_01_users.py::Test01UserAPI::test_07_01_users_username_patch_admin PASSED [ 33%]
tests/test_01_users.py::Test01UserAPI::test_07_02_users_username_patch_moderator PASSED [ 35%]
tests/test_01_users.py::Test01UserAPI::test_07_03_users_username_patch_user PASSED [ 37%]
tests/test_01_users.py::Test01UserAPI::test_07_05_users_username_put_user_restricted PASSED [ 39%]
tests/test_01_users.py::Test01UserAPI::test_08_01_users_username_delete_admin PASSED [ 41%]
tests/test_01_users.py::Test01UserAPI::test_08_02_users_username_delete_moderator PASSED [ 43%]
tests/test_01_users.py::Test01UserAPI::test_08_03_users_username_delete_user PASSED [ 45%]
tests/test_01_users.py::Test01UserAPI::test_08_04_users_username_delete_superuser PASSED [ 47%]
tests/test_01_users.py::Test01UserAPI::test_09_users_check_permissions PASSED [ 49%]
tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin FAILED [ 50%]
tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin FAILED [ 52%]
tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user FAILED [ 54%]
tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth FAILED [ 56%]
tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin FAILED [ 58%]
tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin FAILED [ 60%]
tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin FAILED [ 62%]
tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user FAILED [ 64%]
tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator FAILED [ 66%]
tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth FAILED    [ 67%]
tests/test_03_genre.py::Test03GenreAPI::test_02_genre FAILED             [ 69%]
tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete FAILED     [ 71%]
tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission FAILED [ 73%]
tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user FAILED [ 75%]
tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator FAILED [ 77%]
tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth FAILED    [ 79%]
tests/test_04_title.py::Test04TitleAPI::test_02_title_admin FAILED       [ 81%]
tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail FAILED     [ 83%]
tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission FAILED [ 84%]
tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth FAILED [ 86%]
tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin FAILED    [ 88%]
tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail FAILED   [ 90%]
tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission FAILED [ 92%]
tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth FAILED [ 94%]
tests/test_06_comment.py::Test06CommentAPI::test_02_comment FAILED       [ 96%]
tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail FAILED [ 98%]
tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission FAILED [100%]

=================================== FAILURES ===================================
_________________ Test00UserRegistration.test_00_nodata_signup _________________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x1075681f0>
client = <django.test.client.Client object at 0x10770bbe0>

    @pytest.mark.django_db(transaction=True)
    def test_00_nodata_signup(self, client):
        request_type = 'POST'
        response = client.post(self.url_signup)
    
>       assert response.status_code != 404, (
            f'Страница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: Страница `/api/v1/auth/signup/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_00_user_registration.py:18: AssertionError
---------------------------- Captured stdout setup -----------------------------
Operations to perform:
  Synchronize unmigrated apps: django_extensions, django_filters, messages, rest_framework, staticfiles
  Apply all migrations: admin, auth, contenttypes, reviews, sessions
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
Running migrations:
  Applying contenttypes.0001_initial... OK
  Applying contenttypes.0002_remove_content_type_name... OK
  Applying auth.0001_initial... OK
  Applying auth.0002_alter_permission_name_max_length... OK
  Applying auth.0003_alter_user_email_max_length... OK
  Applying auth.0004_alter_user_username_opts... OK
  Applying auth.0005_alter_user_last_login_null... OK
  Applying auth.0006_require_contenttypes_0002... OK
  Applying auth.0007_alter_validators_add_error_messages... OK
  Applying auth.0008_alter_user_username_max_length... OK
  Applying auth.0009_alter_user_last_name_max_length... OK
  Applying auth.0010_alter_group_name_max_length... OK
  Applying auth.0011_update_proxy_permissions... OK
  Applying reviews.0001_initial... OK
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying reviews.0002_auto_20220201_1654... OK
  Applying reviews.0003_category_genre_title... OK
  Applying reviews.0004_auto_20220203_0926... OK
  Applying reviews.0005_auto_20220203_0935... OK
  Applying sessions.0001_initial... OK
---------------------------- Captured stderr setup -----------------------------
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/auth/signup/
______________ Test00UserRegistration.test_00_invalid_data_signup ______________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x10796daf0>
client = <django.test.client.Client object at 0x107930340>

    @pytest.mark.django_db(transaction=True)
    def test_00_invalid_data_signup(self, client):
        invalid_email = 'invalid_email'
        invalid_username = 'invalid_username@yamdb.fake'
    
        invalid_data = {
            'email': invalid_email,
            'username': invalid_username
        }
        request_type = 'POST'
        response = client.post(self.url_signup, data=invalid_data)
    
>       assert response.status_code != 404, (
            f'Страница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: Страница `/api/v1/auth/signup/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_00_user_registration.py:47: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/auth/signup/
____________ Test00UserRegistration.test_00_valid_data_user_signup _____________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x10796c190>
client = <django.test.client.Client object at 0x1079706d0>

    @pytest.mark.django_db(transaction=True)
    def test_00_valid_data_user_signup(self, client):
    
        valid_email = 'valid@yamdb.fake'
        valid_username = 'valid_username'
        outbox_before_count = len(mail.outbox)
    
        valid_data = {
            'email': valid_email,
            'username': valid_username
        }
        request_type = 'POST'
        response = client.post(self.url_signup, data=valid_data)
        outbox_after = mail.outbox  # email outbox after user create
    
>       assert response.status_code != 404, (
            f'Страница `{self.url_signup}` не найдена, проверьте этот адрес в *urls.py*'
        )
E       AssertionError: Страница `/api/v1/auth/signup/` не найдена, проверьте этот адрес в *urls.py*
E       assert 404 != 404
E        +  where 404 = <HttpResponseNotFound status_code=404, "text/html">.status_code

tests/test_00_user_registration.py:90: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/auth/signup/
_________ Test00UserRegistration.test_00_obtain_jwt_token_invalid_data _________

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x107970e20>
client = <django.test.client.Client object at 0x107b62640>

    @pytest.mark.django_db(transaction=True)
    def test_00_obtain_jwt_token_invalid_data(self, client):
    
        request_type = 'POST'
        response = client.post(self.url_token)
        assert response.status_code != 404, (
            f'Страница `{self.url_token}` не найдена, проверьте этот адрес в *urls.py*'
        )
    
        code = 400
        assert response.status_code == code, (
            f'Проверьте, что при POST запросе `{self.url_token}` без параметров, '
            f'возвращается статус {code}'
        )
    
        invalid_data = {
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        assert response.status_code == code, (
            f'Проверьте, что при POST запросе `{self.url_token}` без username, '
            f'возвращается статус {code}'
        )
    
        invalid_data = {
            'username': 'unexisting_user',
            'confirmation_code': 12345
        }
        response = client.post(self.url_token, data=invalid_data)
        code = 404
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе `{self.url_token}` с несуществующим username, '
            f'возвращается статус {code}'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/auth/token/` с несуществующим username, возвращается статус 404
E       assert 400 == 404
E         +400
E         -404

tests/test_00_user_registration.py:197: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:222 Bad Request: /api/v1/auth/token/
WARNING  django.request:log.py:222 Bad Request: /api/v1/auth/token/
______ Test00UserRegistration.test_00_registration_me_username_restricted ______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x107b930d0>
client = <django.test.client.Client object at 0x107b97970>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_me_username_restricted(self, client):
        valid_email = 'valid@yamdb.fake'
        invalid_username = 'me'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email,
            'username': invalid_username
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 400
>       assert response.status_code == code, (
            f'Проверьте, что при {request_type} запросе `{self.url_signup}` '
            f'нельзя создать пользователя с username = "me" и возвращается статус {code}'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/auth/signup/` нельзя создать пользователя с username = "me" и возвращается статус 400
E       assert 404 == 400
E         +404
E         -400

tests/test_00_user_registration.py:239: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/auth/signup/
______ Test00UserRegistration.test_00_registration_same_email_restricted _______

self = <tests.test_00_user_registration.Test00UserRegistration object at 0x107ba3700>
client = <django.test.client.Client object at 0x107b98a30>

    @pytest.mark.django_db(transaction=True)
    def test_00_registration_same_email_restricted(self, client):
        valid_email_1 = 'test_duplicate_1@yamdb.fake'
        valid_email_2 = 'test_duplicate_2@yamdb.fake'
        valid_username_1 = 'valid_username_1'
        valid_username_2 = 'valid_username_2'
        request_type = 'POST'
    
        valid_data = {
            'email': valid_email_1,
            'username': valid_username_1
        }
        response = client.post(self.url_signup, data=valid_data)
        code = 200
>       assert response.status_code == code, (
            f'Проверьте, что при {request_type} запросе `{self.url_signup}` '
            f'можно создать пользователя с валидными данными и возвращается статус {code}'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/auth/signup/` можно создать пользователя с валидными данными и возвращается статус 200
E       assert 404 == 200
E         +404
E         -200

tests/test_00_user_registration.py:258: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/auth/signup/
________________ Test01UserAPI.test_01_users_not_authenticated _________________

self = <tests.test_01_users.Test01UserAPI object at 0x107b986d0>
client = <django.test.client.Client object at 0x107ba3c10>

    @pytest.mark.django_db(transaction=True)
    def test_01_users_not_authenticated(self, client):
>       response = client.get('/api/v1/users/')

tests/test_01_users.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.9/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
venv/lib/python3.9/site-packages/django/test/client.py:345: in get
    return self.generic('GET', path, secure=secure, **{
venv/lib/python3.9/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
venv/lib/python3.9/site-packages/django/test/client.py:503: in request
    raise exc_value
venv/lib/python3.9/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
venv/lib/python3.9/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv/lib/python3.9/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv/lib/python3.9/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
venv/lib/python3.9/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv/lib/python3.9/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
venv/lib/python3.9/site-packages/rest_framework/views.py:497: in dispatch
    self.initial(request, *args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/views.py:415: in initial
    self.check_permissions(request)
venv/lib/python3.9/site-packages/rest_framework/views.py:332: in check_permissions
    if not permission.has_permission(request, self):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.permissions.AdminOnly object at 0x1079c5b50>
request = <rest_framework.request.Request: GET '/api/v1/users/'>
view = <api.views.UserViewSet object at 0x1079c56a0>

    def has_permission(self, request, view):
        return (
            request.user.is_superuser
>           or request.user.role == request.user.ADMIN
        )
E       AttributeError: 'AnonymousUser' object has no attribute 'role'

api_yamdb/api/permissions.py:21: AttributeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/users/
Traceback (most recent call last):
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 332, in check_permissions
    if not permission.has_permission(request, self):
  File "/Users/michaelrudy/Dev/api_yamdb/api_yamdb/api/permissions.py", line 21, in has_permission
    or request.user.role == request.user.ADMIN
AttributeError: 'AnonymousUser' object has no attribute 'role'
____________ Test01UserAPI.test_02_users_username_not_authenticated ____________

self = <tests.test_01_users.Test01UserAPI object at 0x107d9b0d0>
client = <django.test.client.Client object at 0x107d9b760>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_users_username_not_authenticated(self, client, admin):
>       response = client.get(f'/api/v1/users/{admin.username}/')

tests/test_01_users.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.9/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
venv/lib/python3.9/site-packages/django/test/client.py:345: in get
    return self.generic('GET', path, secure=secure, **{
venv/lib/python3.9/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
venv/lib/python3.9/site-packages/django/test/client.py:503: in request
    raise exc_value
venv/lib/python3.9/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
venv/lib/python3.9/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv/lib/python3.9/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv/lib/python3.9/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
venv/lib/python3.9/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv/lib/python3.9/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
venv/lib/python3.9/site-packages/rest_framework/views.py:497: in dispatch
    self.initial(request, *args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/views.py:415: in initial
    self.check_permissions(request)
venv/lib/python3.9/site-packages/rest_framework/views.py:332: in check_permissions
    if not permission.has_permission(request, self):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.permissions.AdminOnly object at 0x107ce3a90>
request = <rest_framework.request.Request: GET '/api/v1/users/TestAdmin/'>
view = <api.views.UserViewSet object at 0x107ce3940>

    def has_permission(self, request, view):
        return (
            request.user.is_superuser
>           or request.user.role == request.user.ADMIN
        )
E       AttributeError: 'AnonymousUser' object has no attribute 'role'

api_yamdb/api/permissions.py:21: AttributeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/users/TestAdmin/
Traceback (most recent call last):
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 332, in check_permissions
    if not permission.has_permission(request, self):
  File "/Users/michaelrudy/Dev/api_yamdb/api_yamdb/api/permissions.py", line 21, in has_permission
    or request.user.role == request.user.ADMIN
AttributeError: 'AnonymousUser' object has no attribute 'role'
_______________ Test01UserAPI.test_03_users_me_not_authenticated _______________

self = <tests.test_01_users.Test01UserAPI object at 0x107dd7a30>
client = <django.test.client.Client object at 0x107dd7dc0>

    @pytest.mark.django_db(transaction=True)
    def test_03_users_me_not_authenticated(self, client):
>       response = client.get('/api/v1/users/me/')

tests/test_01_users.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
venv/lib/python3.9/site-packages/django/test/client.py:535: in get
    response = super().get(path, data=data, secure=secure, **extra)
venv/lib/python3.9/site-packages/django/test/client.py:345: in get
    return self.generic('GET', path, secure=secure, **{
venv/lib/python3.9/site-packages/django/test/client.py:422: in generic
    return self.request(**r)
venv/lib/python3.9/site-packages/django/test/client.py:503: in request
    raise exc_value
venv/lib/python3.9/site-packages/django/core/handlers/exception.py:34: in inner
    response = get_response(request)
venv/lib/python3.9/site-packages/django/core/handlers/base.py:115: in _get_response
    response = self.process_exception_by_middleware(e, request)
venv/lib/python3.9/site-packages/django/core/handlers/base.py:113: in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
venv/lib/python3.9/site-packages/django/views/decorators/csrf.py:54: in wrapped_view
    return view_func(*args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/viewsets.py:125: in view
    return self.dispatch(request, *args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/views.py:509: in dispatch
    response = self.handle_exception(exc)
venv/lib/python3.9/site-packages/rest_framework/views.py:469: in handle_exception
    self.raise_uncaught_exception(exc)
venv/lib/python3.9/site-packages/rest_framework/views.py:480: in raise_uncaught_exception
    raise exc
venv/lib/python3.9/site-packages/rest_framework/views.py:497: in dispatch
    self.initial(request, *args, **kwargs)
venv/lib/python3.9/site-packages/rest_framework/views.py:415: in initial
    self.check_permissions(request)
venv/lib/python3.9/site-packages/rest_framework/views.py:332: in check_permissions
    if not permission.has_permission(request, self):
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <api.permissions.AdminOnly object at 0x107dc1b50>
request = <rest_framework.request.Request: GET '/api/v1/users/me/'>
view = <api.views.UserViewSet object at 0x107dc1af0>

    def has_permission(self, request, view):
        return (
            request.user.is_superuser
>           or request.user.role == request.user.ADMIN
        )
E       AttributeError: 'AnonymousUser' object has no attribute 'role'

api_yamdb/api/permissions.py:21: AttributeError
------------------------------ Captured log call -------------------------------
ERROR    django.request:log.py:222 Internal Server Error: /api/v1/users/me/
Traceback (most recent call last):
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/viewsets.py", line 125, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 509, in dispatch
    response = self.handle_exception(exc)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 469, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 480, in raise_uncaught_exception
    raise exc
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 497, in dispatch
    self.initial(request, *args, **kwargs)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 415, in initial
    self.check_permissions(request)
  File "/Users/michaelrudy/Dev/api_yamdb/venv/lib/python3.9/site-packages/rest_framework/views.py", line 332, in check_permissions
    if not permission.has_permission(request, self):
  File "/Users/michaelrudy/Dev/api_yamdb/api_yamdb/api/permissions.py", line 21, in has_permission
    or request.user.role == request.user.ADMIN
AttributeError: 'AnonymousUser' object has no attribute 'role'
____________________ Test01UserAPI.test_04_users_get_admin _____________________

self = <tests.test_01_users.Test01UserAPI object at 0x107e15160>
admin_client = <rest_framework.test.APIClient object at 0x107e154c0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_users_get_admin(self, admin_client, admin):
        response = admin_client.get('/api/v1/users/')
        assert response.status_code != 404, (
            'Страница `/api/v1/users/` не найдена, проверьте этот адрес в *urls.py*'
        )
        assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/users/` с токеном авторизации возвращается статус 200'
        )
        data = response.json()
>       assert 'count' in data, (
            'Проверьте, что при GET запросе `/api/v1/users/` возвращаете данные с пагинацией. '
            'Не найден параметр `count`'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/` возвращаете данные с пагинацией. Не найден параметр `count`
E       assert 'count' in [{'bio': 'admin bio', 'email': 'testadmin@yamdb.fake', 'first_name': '', 'last_name': '', ...}]

tests/test_01_users.py:55: AssertionError
__________________ Test01UserAPI.test_04_02_users_get_search ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x107dec310>
admin_client = <rest_framework.test.APIClient object at 0x107dec550>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_02_users_get_search(self, admin_client, admin):
        url = '/api/v1/users/'
        search_url = f'{url}?search={admin.username}'
        response = admin_client.get(search_url)
        assert response.status_code != 404, (
            'Страница `/api/v1/users/?search={username}` не найдена, проверьте этот адрес в *urls.py*'
        )
        reponse_json = response.json()
>       assert 'results' in reponse_json and isinstance(reponse_json.get('results'), list), (
            'Проверьте, что при GET запросе `/api/v1/users/?search={username}` '
            'результаты возвращаются под ключом `results` и в виде списка.'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/?search={username}` результаты возвращаются под ключом `results` и в виде списка.
E       assert ('results' in [{'bio': 'admin bio', 'email': 'testadmin@yamdb.fake', 'first_name': '', 'last_name': '', ...}])

tests/test_01_users.py:97: AssertionError
__________________ Test01UserAPI.test_05_01_users_post_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x107e2e130>
admin_client = <rest_framework.test.APIClient object at 0x107cbf700>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_05_01_users_post_admin(self, admin_client, admin):
        empty_data = {}
        response = admin_client.post('/api/v1/users/', data=empty_data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/users/` с пустыми данными возвращаетe 400'
        )
        no_email_data = {
            'username': 'TestUser_noemail',
            'role': 'user'
        }
        response = admin_client.post('/api/v1/users/', data=no_email_data)
>       assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/users/` без email, возвращаетe статус 400'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/users/` без email, возвращаетe статус 400
E       assert 201 == 400
E         +201
E         -400

tests/test_01_users.py:143: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/users/
___________________ Test01UserAPI.test_10_users_me_get_admin ___________________

self = <tests.test_01_users.Test01UserAPI object at 0x107ce2c10>
admin_client = <rest_framework.test.APIClient object at 0x107d15f10>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_10_users_me_get_admin(self, admin_client, admin):
        user, moderator = create_users_api(admin_client)
        response = admin_client.get('/api/v1/users/me/')
>       assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/users/me/` от админа, возвращается статус 200'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/users/me/` от админа, возвращается статус 200
E       assert 404 == 200
E         +404
E         -200

tests/test_01_users.py:496: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/users/me/
________________ Test01UserAPI.test_11_01_users_me_patch_admin _________________

self = <tests.test_01_users.Test01UserAPI object at 0x107b620d0>
admin_client = <rest_framework.test.APIClient object at 0x107c1d4c0>

    @pytest.mark.django_db(transaction=True)
    def test_11_01_users_me_patch_admin(self, admin_client):
        user, moderator = create_users_api(admin_client)
        data = {
            'first_name': 'Admin',
            'last_name': 'Test',
            'bio': 'description'
        }
        response = admin_client.patch('/api/v1/users/me/', data=data)
>       assert response.status_code == 200, (
            'Проверьте, что при PATCH запросе `/api/v1/users/me/` с токеном авторизации возвращается статус 200'
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/me/` с токеном авторизации возвращается статус 200
E       assert 404 == 200
E         +404
E         -200

tests/test_01_users.py:535: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Not Found: /api/v1/users/me/
_________________ Test01UserAPI.test_11_02_users_me_patch_user _________________

self = <tests.test_01_users.Test01UserAPI object at 0x107d90d60>
user_client = <rest_framework.test.APIClient object at 0x107c1a070>

    @pytest.mark.django_db(transaction=True)
    def test_11_02_users_me_patch_user(self, user_client):
        data = {
            'first_name': 'New user first name',
            'last_name': 'New user last name',
            'bio': 'new user bio',
        }
        response = user_client.patch('/api/v1/users/me/', data=data)
>       assert response.status_code == 200, (
            'Проверьте, что при PATCH запросе `/api/v1/users/me/`, '
            'пользователь с ролью user может изменить свои данные, и возвращается статус 200'
        )
E       AssertionError: Проверьте, что при PATCH запросе `/api/v1/users/me/`, пользователь с ролью user может изменить свои данные, и возвращается статус 200
E       assert 403 == 200
E         +403
E         -200

tests/test_01_users.py:560: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Forbidden: /api/v1/users/me/
_________________ Test02CategoryAPI.test_01_category_not_auth __________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x107cad310>
client = <django.test.client.Client object at 0x107e15820>

    @pytest.mark.django_db(transaction=True)
    def test_01_category_not_auth(self, client):
        response = client.get('/api/v1/categories/')
        assert response.status_code != 404, (
            'Страница `/api/v1/categories/` не найдена, проверьте этот адрес в *urls.py*'
        )
>       assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/categories/` без токена авторизации возвращается статус 200'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/categories/` без токена авторизации возвращается статус 200
E       assert 401 == 200
E         +401
E         -200

tests/test_02_category.py:14: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Unauthorized: /api/v1/categories/
___________________ Test02CategoryAPI.test_02_category_admin ___________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x107c3d5b0>
admin_client = <rest_framework.test.APIClient object at 0x107e15b20>

    @pytest.mark.django_db(transaction=True)
    def test_02_category_admin(self, admin_client):
        data = {}
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с не правильными данными возвращает статус 400'
        )
        data = {
            'name': 'Фильм',
            'slug': 'films'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с правильными данными возвращает статус 201'
        )
        data = {
            'name': 'Новые фильмы',
            'slug': 'films'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/categories/` нельзя создать 2 категории с одинаковым `slug`'
        )
        data = {
            'name': 'Книги',
            'slug': 'books'
        }
        response = admin_client.post('/api/v1/categories/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/categories/` с правильными данными возвращает статус 201'
        )
        response = admin_client.get('/api/v1/categories/')
        assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращает статус 200'
        )
        data = response.json()
>       assert 'count' in data, (
            'Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. '
            'Не найден параметр `count`'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/categories/` возвращаете данные с пагинацией. Не найден параметр `count`
E       assert 'count' in [{'id': 1, 'name': 'Фильм', 'slug': 'films', 'titles': []}, {'id': 2, 'name': 'Книги', 'slug': 'books', 'titles': []}]

tests/test_02_category.py:54: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/categories/
WARNING  django.request:log.py:222 Bad Request: /api/v1/categories/
_______________ Test02CategoryAPI.test_03_category_delete_admin ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x107c9e610>
admin_client = <rest_framework.test.APIClient object at 0x107c17c10>

    @pytest.mark.django_db(transaction=True)
    def test_03_category_delete_admin(self, admin_client):
        create_categories(admin_client)
        response = admin_client.delete('/api/v1/categories/books/')
        assert response.status_code == 204, (
            'Проверьте, что при DELETE запросе `/api/v1/categories/{slug}/` возвращаете статус 204'
        )
        response = admin_client.get('/api/v1/categories/')
>       test_data = response.json()['results']
E       TypeError: list indices must be integers or slices, not str

tests/test_02_category.py:100: TypeError
__________ Test02CategoryAPI.test_04_category_check_permission_admin ___________

self = <tests.test_02_category.Test02CategoryAPI object at 0x107de8e50>
client = <django.test.client.Client object at 0x107d140a0>
admin_client = <rest_framework.test.APIClient object at 0x107d177c0>

    @pytest.mark.django_db(transaction=True)
    def test_04_category_check_permission_admin(self, client, admin_client):
        categories = create_categories(admin_client)
        data = {
            'name': 'Музыка',
            'slug': 'music'
        }
        response = client.post('/api/v1/categories/', data=data)
        assert response.status_code == 401, (
            'Проверьте, что при POST запросе `/api/v1/categories/` '
            'без токена авторизации возвращается статус 401'
        )
        response = client.delete(f'/api/v1/categories/{categories[0]["slug"]}/')
        assert response.status_code == 401, (
            'Проверьте, что при DELETE запросе `/api/v1/categories/{{slug}}/` '
            'без токена авторизации возвращается статус 401'
        )
        user, moderator = create_users_api(admin_client)
>       self.check_permissions(user, 'обычного пользователя', categories)

tests/test_02_category.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.test_02_category.Test02CategoryAPI object at 0x107de8e50>
user = <User: TestUser>, user_name = 'обычного пользователя'
categories = [{'name': 'Фильм', 'slug': 'films'}, {'name': 'Книги', 'slug': 'books'}]

    def check_permissions(self, user, user_name, categories):
        client_user = auth_client(user)
        data = {
            'name': 'Музыка',
            'slug': 'music'
        }
        response = client_user.post('/api/v1/categories/', data=data)
>       assert response.status_code == 403, (
            f'Проверьте, что при POST запросе `/api/v1/categories/` '
            f'с токеном авторизации {user_name} возвращается статус 403'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/categories/` с токеном авторизации обычного пользователя возвращается статус 403
E       assert 201 == 403
E         +201
E         -403

tests/test_02_category.py:123: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Unauthorized: /api/v1/categories/
WARNING  django.request:log.py:222 Unauthorized: /api/v1/categories/films/
________________ Test02CategoryAPI.test_05_category_create_user ________________

self = <tests.test_02_category.Test02CategoryAPI object at 0x107bbd7c0>
user_client = <rest_framework.test.APIClient object at 0x107d92dc0>

    @pytest.mark.django_db(transaction=True)
    def test_05_category_create_user(self, user_client):
        url = '/api/v1/categories/'
        data = {
            'name': 'Всякое разное',
            'slug': 'something'
        }
        response = user_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе на `{url}`, создание категорий недоступно для '
            f'пользователя с ролью user'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/categories/`, создание категорий недоступно для пользователя с ролью user
E       assert 201 == 403
E         +201
E         -403

tests/test_02_category.py:163: AssertionError
_____________ Test02CategoryAPI.test_06_category_create_moderator ______________

self = <tests.test_02_category.Test02CategoryAPI object at 0x107de8820>
moderator_client = <rest_framework.test.APIClient object at 0x107dc1b20>

    @pytest.mark.django_db(transaction=True)
    def test_06_category_create_moderator(self, moderator_client):
        url = '/api/v1/categories/'
        data = {
            'name': 'Всякое разное',
            'slug': 'something'
        }
        response = moderator_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе на `{url}`, создание категорий недоступно для '
            f'пользователя с ролью moderator'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/categories/`, создание категорий недоступно для пользователя с ролью moderator
E       assert 201 == 403
E         +201
E         -403

tests/test_02_category.py:177: AssertionError
____________________ Test03GenreAPI.test_01_genre_not_auth _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x107c88790>
client = <django.test.client.Client object at 0x107c884f0>

    @pytest.mark.django_db(transaction=True)
    def test_01_genre_not_auth(self, client):
        response = client.get('/api/v1/genres/')
        assert response.status_code != 404, (
            'Страница `/api/v1/genres/` не найдена, проверьте этот адрес в *urls.py*'
        )
>       assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/genres/` без токена авторизации возвращается статус 200'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/genres/` без токена авторизации возвращается статус 200
E       assert 401 == 200
E         +401
E         -200

tests/test_03_genre.py:14: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Unauthorized: /api/v1/genres/
_________________________ Test03GenreAPI.test_02_genre _________________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x107d92070>
admin_client = <rest_framework.test.APIClient object at 0x107c88670>

    @pytest.mark.django_db(transaction=True)
    def test_02_genre(self, admin_client):
        data = {}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с не правильными данными возвращает статус 400'
        )
        data = {'name': 'Ужасы', 'slug': 'horror'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с правильными данными возвращает статус 201'
        )
        data = {'name': 'Триллер', 'slug': 'horror'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/genres/` нельзя создать 2 жанра с одинаковым `slug`'
        )
        data = {'name': 'Комедия', 'slug': 'comedy'}
        response = admin_client.post('/api/v1/genres/', data=data)
        assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/genres/` с правильными данными возвращает статус 201'
        )
        response = admin_client.get('/api/v1/genres/')
        assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращает статус 200'
        )
        data = response.json()
>       assert 'count' in data, (
            'Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. '
            'Не найден параметр `count`'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/genres/` возвращаете данные с пагинацией. Не найден параметр `count`
E       assert 'count' in [{'id': 1, 'name': 'Ужасы', 'slug': 'horror', 'titles': []}, {'id': 2, 'name': 'Комедия', 'slug': 'comedy', 'titles': []}]

tests/test_03_genre.py:45: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/genres/
WARNING  django.request:log.py:222 Bad Request: /api/v1/genres/
_____________________ Test03GenreAPI.test_03_genres_delete _____________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x107c88430>
admin_client = <rest_framework.test.APIClient object at 0x107df4c10>

    @pytest.mark.django_db(transaction=True)
    def test_03_genres_delete(self, admin_client):
        genres = create_genre(admin_client)
        response = admin_client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
        assert response.status_code == 204, (
            'Проверьте, что при DELETE запросе `/api/v1/genres/{slug}/` возвращаете статус 204'
        )
        response = admin_client.get('/api/v1/genres/')
>       test_data = response.json()['results']
E       TypeError: list indices must be integers or slices, not str

tests/test_03_genre.py:91: TypeError
________________ Test03GenreAPI.test_04_genres_check_permission ________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x107d61eb0>
client = <django.test.client.Client object at 0x107d95e80>
admin_client = <rest_framework.test.APIClient object at 0x107d95d60>

    @pytest.mark.django_db(transaction=True)
    def test_04_genres_check_permission(self, client, admin_client):
        genres = create_genre(admin_client)
        data = {
            'name': 'Боевик',
            'slug': 'action'
        }
        response = client.post('/api/v1/genres/', data=data)
        assert response.status_code == 401, (
            'Проверьте, что при POST запросе `/api/v1/genres/` '
            'без токена авторизации возвращается статус 401'
        )
        response = client.delete(f'/api/v1/genres/{genres[0]["slug"]}/')
        assert response.status_code == 401, (
            'Проверьте, что при DELETE запросе `/api/v1/genres/{{slug}}/` '
            'без токена авторизации возвращается статус 401'
        )
        user, moderator = create_users_api(admin_client)
>       self.check_permissions(user, 'обычного пользователя', genres)

tests/test_03_genre.py:139: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <tests.test_03_genre.Test03GenreAPI object at 0x107d61eb0>
user = <User: TestUser>, user_name = 'обычного пользователя'
genres = [{'name': 'Ужасы', 'slug': 'horror'}, {'name': 'Комедия', 'slug': 'comedy'}, {'name': 'Драма', 'slug': 'drama'}]

    def check_permissions(self, user, user_name, genres):
        client_user = auth_client(user)
        data = {
            'name': 'Боевик',
            'slug': 'action'
        }
        response = client_user.post('/api/v1/genres/', data=data)
>       assert response.status_code == 403, (
            f'Проверьте, что при POST запросе `/api/v1/genres/` '
            f'с токеном авторизации {user_name} возвращается статус 403'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/genres/` с токеном авторизации обычного пользователя возвращается статус 403
E       assert 201 == 403
E         +201
E         -403

tests/test_03_genre.py:111: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Unauthorized: /api/v1/genres/
WARNING  django.request:log.py:222 Unauthorized: /api/v1/genres/horror/
___________________ Test03GenreAPI.test_05_genre_create_user ___________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x1079c5cd0>
user_client = <rest_framework.test.APIClient object at 0x107d053d0>

    @pytest.mark.django_db(transaction=True)
    def test_05_genre_create_user(self, user_client):
        url = '/api/v1/genres/'
        data = {
            'name': 'Всякое разное',
            'slug': 'something'
        }
        response = user_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе на `{url}`, создание жанров недоступно для '
            f'пользователя с ролью user'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/genres/`, создание жанров недоступно для пользователя с ролью user
E       assert 201 == 403
E         +201
E         -403

tests/test_03_genre.py:151: AssertionError
________________ Test03GenreAPI.test_06_genre_create_moderator _________________

self = <tests.test_03_genre.Test03GenreAPI object at 0x107d03be0>
moderator_client = <rest_framework.test.APIClient object at 0x107b6c460>

    @pytest.mark.django_db(transaction=True)
    def test_06_genre_create_moderator(self, moderator_client):
        url = '/api/v1/genres/'
        data = {
            'name': 'Всякое разное',
            'slug': 'something'
        }
        response = moderator_client.post(url, data=data)
        code = 403
>       assert response.status_code == code, (
            f'Проверьте, что при POST запросе на `{url}`, создание жанров недоступно для '
            f'пользователя с ролью moderator'
        )
E       AssertionError: Проверьте, что при POST запросе на `/api/v1/genres/`, создание жанров недоступно для пользователя с ролью moderator
E       assert 201 == 403
E         +201
E         -403

tests/test_03_genre.py:165: AssertionError
____________________ Test04TitleAPI.test_01_title_not_auth _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x107b6c220>
client = <django.test.client.Client object at 0x107d95940>

    @pytest.mark.django_db(transaction=True)
    def test_01_title_not_auth(self, client):
        response = client.get('/api/v1/titles/')
        assert response.status_code != 404, (
            'Страница `/api/v1/titles/` не найдена, проверьте этот адрес в *urls.py*'
        )
>       assert response.status_code == 200, (
            'Проверьте, что при GET запросе `/api/v1/titles/` без токена авторизации возвращается статус 200'
        )
E       AssertionError: Проверьте, что при GET запросе `/api/v1/titles/` без токена авторизации возвращается статус 200
E       assert 401 == 200
E         +401
E         -200

tests/test_04_title.py:15: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Unauthorized: /api/v1/titles/
______________________ Test04TitleAPI.test_02_title_admin ______________________

self = <tests.test_04_title.Test04TitleAPI object at 0x107cbf490>
admin_client = <rest_framework.test.APIClient object at 0x107975550>

    @pytest.mark.django_db(transaction=True)
    def test_02_title_admin(self, admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        data = {}
        response = admin_client.post('/api/v1/titles/', data=data)
        assert response.status_code == 400, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с не правильными данными возвращает статус 400'
        )
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       assert response.status_code == 201, (
            'Проверьте, что при POST запросе `/api/v1/titles/` с правильными данными возвращает статус 201'
        )
E       AssertionError: Проверьте, что при POST запросе `/api/v1/titles/` с правильными данными возвращает статус 201
E       assert 400 == 201
E         +400
E         -201

tests/test_04_title.py:31: AssertionError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
_____________________ Test04TitleAPI.test_03_titles_detail _____________________

self = <tests.test_04_title.Test04TitleAPI object at 0x107dc1130>
client = <django.test.client.Client object at 0x107b93850>
admin_client = <rest_framework.test.APIClient object at 0x107b93820>

    @pytest.mark.django_db(transaction=True)
    def test_03_titles_detail(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests/test_04_title.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107b93820>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
________________ Test04TitleAPI.test_04_titles_check_permission ________________

self = <tests.test_04_title.Test04TitleAPI object at 0x107c1e910>
client = <django.test.client.Client object at 0x107d61fa0>
admin_client = <rest_framework.test.APIClient object at 0x107d61970>

    @pytest.mark.django_db(transaction=True)
    def test_04_titles_check_permission(self, client, admin_client):
>       titles, categories, genres = create_titles(admin_client)

tests/test_04_title.py:231: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107d61970>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
___________________ Test05ReviewAPI.test_01_review_not_auth ____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x107d96400>
client = <django.test.client.Client object at 0x107da4a00>
admin_client = <rest_framework.test.APIClient object at 0x107da49a0>

    @pytest.mark.django_db(transaction=True)
    def test_01_review_not_auth(self, client, admin_client):
>       titles, _, _ = create_titles(admin_client)

tests/test_05_review.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107da49a0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
_____________________ Test05ReviewAPI.test_02_review_admin _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x107d03100>
admin_client = <rest_framework.test.APIClient object at 0x107d56460>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_review_admin(self, admin_client, admin):
>       titles, _, _ = create_titles(admin_client)

tests/test_05_review.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107d56460>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
____________________ Test05ReviewAPI.test_03_review_detail _____________________

self = <tests.test_05_review.Test05ReviewAPI object at 0x107df4df0>
client = <django.test.client.Client object at 0x107df4eb0>
admin_client = <rest_framework.test.APIClient object at 0x107df4a00>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_05_review.py:202: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107df4a00>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
_______________ Test05ReviewAPI.test_04_reviews_check_permission _______________

self = <tests.test_05_review.Test05ReviewAPI object at 0x107b6cb50>
client = <django.test.client.Client object at 0x107c3bd90>
admin_client = <rest_framework.test.APIClient object at 0x107cf37f0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_reviews_check_permission(self, client, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_05_review.py:319: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107cf37f0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
__________________ Test06CommentAPI.test_01_comment_not_auth ___________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x107c9ec10>
client = <django.test.client.Client object at 0x107c17670>
admin_client = <rest_framework.test.APIClient object at 0x107c17be0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_01_comment_not_auth(self, client, admin_client, admin):
>       reviews, titles, _, _ = create_reviews(admin_client, admin)

tests/test_06_comment.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107c17be0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
_______________________ Test06CommentAPI.test_02_comment _______________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x1079c5d60>
admin_client = <rest_framework.test.APIClient object at 0x107cbfe20>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_02_comment(self, admin_client, admin):
>       reviews, titles, user, moderator = create_reviews(admin_client, admin)

tests/test_06_comment.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107cbfe20>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
____________________ Test06CommentAPI.test_03_review_detail ____________________

self = <tests.test_06_comment.Test06CommentAPI object at 0x107da4760>
client = <django.test.client.Client object at 0x1079c5ca0>
admin_client = <rest_framework.test.APIClient object at 0x107d61dc0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_03_review_detail(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests/test_06_comment.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107d61dc0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
______________ Test06CommentAPI.test_04_comment_check_permission _______________

self = <tests.test_06_comment.Test06CommentAPI object at 0x107aefe80>
client = <django.test.client.Client object at 0x107b7ed60>
admin_client = <rest_framework.test.APIClient object at 0x107b7e3a0>
admin = <User: TestAdmin>

    @pytest.mark.django_db(transaction=True)
    def test_04_comment_check_permission(self, client, admin_client, admin):
>       comments, reviews, titles, user, moderator = create_comments(admin_client, admin)

tests/test_06_comment.py:228: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/common.py:105: in create_comments
    reviews, titles, user, moderator = create_reviews(admin_client, admin)
tests/common.py:85: in create_reviews
    titles, _, _ = create_titles(admin_client)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

admin_client = <rest_framework.test.APIClient object at 0x107b7e3a0>

    def create_titles(admin_client):
        genres = create_genre(admin_client)
        categories = create_categories(admin_client)
        result = []
        data = {'name': 'Поворот туда', 'year': 2000, 'genre': [genres[0]['slug'], genres[1]['slug']],
                'category': categories[0]['slug'], 'description': 'Крутое пике'}
        response = admin_client.post('/api/v1/titles/', data=data)
>       data['id'] = response.json()['id']
E       KeyError: 'id'

tests/common.py:69: KeyError
------------------------------ Captured log call -------------------------------
WARNING  django.request:log.py:222 Bad Request: /api/v1/titles/
--------------------------- Captured stderr teardown ---------------------------
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
=========================== short test summary info ============================
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_nodata_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_invalid_data_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_valid_data_user_signup
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_obtain_jwt_token_invalid_data
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_me_username_restricted
FAILED tests/test_00_user_registration.py::Test00UserRegistration::test_00_registration_same_email_restricted
FAILED tests/test_01_users.py::Test01UserAPI::test_01_users_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_02_users_username_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_03_users_me_not_authenticated
FAILED tests/test_01_users.py::Test01UserAPI::test_04_users_get_admin - Asser...
FAILED tests/test_01_users.py::Test01UserAPI::test_04_02_users_get_search - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_05_01_users_post_admin - A...
FAILED tests/test_01_users.py::Test01UserAPI::test_10_users_me_get_admin - As...
FAILED tests/test_01_users.py::Test01UserAPI::test_11_01_users_me_patch_admin
FAILED tests/test_01_users.py::Test01UserAPI::test_11_02_users_me_patch_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_01_category_not_auth
FAILED tests/test_02_category.py::Test02CategoryAPI::test_02_category_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_03_category_delete_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_04_category_check_permission_admin
FAILED tests/test_02_category.py::Test02CategoryAPI::test_05_category_create_user
FAILED tests/test_02_category.py::Test02CategoryAPI::test_06_category_create_moderator
FAILED tests/test_03_genre.py::Test03GenreAPI::test_01_genre_not_auth - Asser...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_02_genre - AssertionError...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_03_genres_delete - TypeEr...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_04_genres_check_permission
FAILED tests/test_03_genre.py::Test03GenreAPI::test_05_genre_create_user - As...
FAILED tests/test_03_genre.py::Test03GenreAPI::test_06_genre_create_moderator
FAILED tests/test_04_title.py::Test04TitleAPI::test_01_title_not_auth - Asser...
FAILED tests/test_04_title.py::Test04TitleAPI::test_02_title_admin - Assertio...
FAILED tests/test_04_title.py::Test04TitleAPI::test_03_titles_detail - KeyErr...
FAILED tests/test_04_title.py::Test04TitleAPI::test_04_titles_check_permission
FAILED tests/test_05_review.py::Test05ReviewAPI::test_01_review_not_auth - Ke...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_02_review_admin - KeyEr...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_03_review_detail - KeyE...
FAILED tests/test_05_review.py::Test05ReviewAPI::test_04_reviews_check_permission
FAILED tests/test_06_comment.py::Test06CommentAPI::test_01_comment_not_auth
FAILED tests/test_06_comment.py::Test06CommentAPI::test_02_comment - KeyError...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_03_review_detail - Ke...
FAILED tests/test_06_comment.py::Test06CommentAPI::test_04_comment_check_permission
======================== 39 failed, 14 passed in 2.21s =========================
